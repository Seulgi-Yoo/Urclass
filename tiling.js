//TODO: 세로 길이 2, 가로 길이 n인 2 x n 보드가 있습니다. 2 x 1 크기의 타일을 가지고 이 보드를 채우는 모든 경우의 수를 리턴해야 합니다.
// 2 * 4 크기의 보드에 2 * 1 사이즈의 타일을 채우려면
// 처음에 세로로 두었을 때: 다음 칸은 2 * 3 보드를 채우기
// => 2 * 3 보드를 세로로 채우면 경우의 수 2(n === 2, base case) + 가로로 채우면 경우의 수 1 (n === 1, base case)
// 처음에 가로로 두었을 때: 다음 칸은 2 * 2 보드를 채우기
// => 경우의 수 2 (n === 2, base case)
// 결론: tiling(n - 1) + tiling(n - 2)

// 함수 호출 시 계산한 값을 넣어줄 memo 객체와 함께 전달 (함수 내부 로직이 돌아가면 memo = {3: 3, 4: 5, ...} 형태로 저장됨) => 배열로 전달해도 됨 (memo = [])
const tiling = function (n, memo = {}) {
  // 시간복잡도 고려하여 memo에 이미 저장된 값이 있다면 해당 값을 반환
  if (n in memo) return memo[n];
  // n이 1일 경우 경우의 수는 1, n이 2일 경우 경우의 수는 2
  if (n <= 2) return n;

  // n이 3 이상일 경우 경우의 수를 계산하여 memo에 저장 및 해당 요소 리턴
  memo[n] = tiling(n - 1, memo) + tiling(n - 2, memo);
  return memo[n];
};
