// 아래와 같이 정의된 피보나치 수열 중 n번째 항의 수를 리턴해야 합니다.

// 0번째 피보나치 수는 0이고, 1번째 피보나치 수는 1입니다. 그 다음 2번째 피보나치 수부터는 바로 직전의 두 피보나치 수의 합으로 정의합니다.
// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, ...

function fibonacci(n) {
  // F(n) = F(n-2) + F(n-1)
  // F(0) = 0, F(1) = F(2) = 1

  /* 기존에 풀었던 코드 */
  // if (n <= 1) return n
  // return fibonacci(n-1) + fibonacci(n-2)

  /* 시간복잡도가 O(N)인 경우(메모이제이션) */
  // 이미 로직을 돌리면서 구해뒀던 값이라면 배열의 요소로 저장해서 재귀함수 중복호출 방지
  let memo = [0, 1] // 0번째, 1번째 요소
  const fib = (n) => { // 함수 하나를 선언해주기
    if (memo[n] !== undefined) { // 이미 구한 값이면(배열에 있다면) 요소 그대로 리턴
      return memo[n];
    }
    else { // 없으면 배열에 값 넣어주고, 해당 값 리턴
      memo[n] = fib(n - 1) + fib(n - 2);
      return memo[n];
    }
  }
  return fib(n);
}